{"version":3,"sources":["components/Meme.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Meme","props","react_default","a","createElement","id","state","topText","src","randomImage","bottomText","Form","type","name","value","placeholder","onChange","handleChange","onClick","handleClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomNumber","Math","floor","random","memes","length","url","setState","event","_event$target","target","defineProperty","_this2","fetch","then","response","json","data","catch","error","console","log","className","components_Meme","components_Form","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAYeA,MAVf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,YAAYJ,EAAMK,MAAMC,SAC/BL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMK,MAAMG,cACtBP,EAAAC,EAAAC,cAAA,MAAIC,GAAG,eAAeJ,EAAMK,MAAMI,oBCwBzBC,MA3Bf,SAAcV,GACZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEQ,KAAK,OACLC,KAAK,UACLC,MAAOb,EAAMK,MAAMC,QACnBF,GAAG,uBACHU,YAAY,WACZC,SAAUf,EAAMgB,eAElBf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEQ,KAAK,OACLC,KAAK,aACLC,MAAOb,EAAMK,MAAMI,WACnBL,GAAG,0BACHU,YAAY,cACZC,SAAUf,EAAMgB,gBAGpBf,EAAAC,EAAAC,cAAA,UAAQc,QAASjB,EAAMkB,aAAvB,cCoCSC,cAvDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAuBFL,YAAc,WACZ,IAAMS,EAAeC,KAAKC,MAAMD,KAAKE,SAAWV,EAAKf,MAAM0B,MAAMC,QAC3DxB,EAAcY,EAAKf,MAAM0B,MAAMJ,GAAcM,IACnDb,EAAKc,SAAS,CACZ1B,YAAaA,KA5BHY,EAiCdJ,aAAe,SAAAmB,GAAS,IAAAC,EACED,EAAME,OAAtBzB,EADcwB,EACdxB,KAAMC,EADQuB,EACRvB,MAEdO,EAAKc,SAALb,OAAAiB,EAAA,EAAAjB,CAAA,GACGT,EAAOC,KAnCVO,EAAKf,MAAQ,CACXG,YAAa,mCACbuB,MAAO,GACPzB,QAAS,GACTG,WAAY,IANFW,mFAWM,IAAAmB,EAAAhB,KAClBiB,MAAM,qCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACRX,EAAUW,EAASE,KAAnBb,MACRQ,EAAKL,SAAS,CACZH,MAAOA,MAGVc,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,sCAsB9B,OACE7C,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,OACbhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAM7C,MAAOkB,KAAKlB,QAClBJ,EAAAC,EAAAC,cAACgD,EAAD,CACE9C,MAAOkB,KAAKlB,MACZW,aAAcO,KAAKP,aACnBE,YAAaK,KAAKL,sBAjDVkC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.cd4cbfe9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Meme(props) {\r\n  return (\r\n    <div id=\"meme\">\r\n      <h1 id=\"top-text\">{props.state.topText}</h1>\r\n      <img src={props.state.randomImage} />\r\n      <h1 id=\"bottom-text\">{props.state.bottomText}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Meme;\r\n","import React from \"react\";\r\n\r\nimport \"./Meme.css\";\r\n\r\nfunction Form(props) {\r\n  return (\r\n    <div>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          name=\"topText\"\r\n          value={props.state.topText}\r\n          id=\"top-text-input-field\"\r\n          placeholder=\"Top text\"\r\n          onChange={props.handleChange}\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"bottomText\"\r\n          value={props.state.bottomText}\r\n          id=\"bottom-text-input-field\"\r\n          placeholder=\"Bottom text\"\r\n          onChange={props.handleChange}\r\n        />\r\n      </form>\r\n      <button onClick={props.handleClick}>Generate</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Meme from \"./components/Meme\";\r\nimport Form from \"./components/Form\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      randomImage: \"https://i.imgflip.com/1ur9b0.jpg\",\r\n      memes: [],\r\n      topText: \"\",\r\n      bottomText: \"\"\r\n    };\r\n  }\r\n\r\n  // Fetch data when component is mounted for the first time\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        const { memes } = response.data;\r\n        this.setState({\r\n          memes: memes\r\n        });\r\n      })\r\n      .catch(error => console.log(error));\r\n  }\r\n\r\n  // Generate a new random image\r\n  handleClick = () => {\r\n    const randomNumber = Math.floor(Math.random() * this.state.memes.length);\r\n    const randomImage = this.state.memes[randomNumber].url;\r\n    this.setState({\r\n      randomImage: randomImage\r\n    });\r\n  };\r\n\r\n  // Change top and bottom text\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Meme state={this.state} />\r\n        <Form\r\n          state={this.state}\r\n          handleChange={this.handleChange}\r\n          handleClick={this.handleClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}